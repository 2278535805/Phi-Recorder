name: Phi Recorder CI
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:


jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libasound2-dev libssl-dev pkg-config libswresample-dev
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-gnu

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-all-crates: "true"

      - name: Sync node version and setup cache
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # Change this to npm, yarn or pnpm.

      - name: Download static-lib
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downlod-static-lib
        with:
          # url: "https://files-cf.phira.cn/prpr-avc-static-lib.tar.gz"
          url: "https://raw.githubusercontent.com/2278535805/Phi-Recorder/main/prpr-avc-static-lib.tar.gz"
          target: ./

      - name: Mkdir static-lib
        run: mkdir static-lib

      - name: Extract static-lib
        uses: a7ul/tar-action@v1.1.0
        id: extract-static-lib
        with:
          command: x
          cwd: ./static-lib
          files: prpr-avc-static-lib.tar.gz

      - name: Build the app
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRPR_AVC_LIBS: ${{ github.workspace }}/static-lib

      - name: Move and rename builds
        run: |
          IFS=','
          SPACE='.SPACE_PLACEHOLDER.'
          mkdir -p ~/artifacts/tauri/
          artifact_paths=$(echo '${{ steps.build.outputs.artifactPaths }}' | sed -e 's/\[//g; s/\]//g' -e 's/["]//g' -e 's/ /$SPACE/g')
          for artifact_path in $artifact_paths; do
            original_path=$(echo "$artifact_path" | sed -e 's/$SPACE/ /g')
            if [[ "$original_path" == *.app ]]; then
              echo "Skipping $original_path"
              continue
            fi
            renamed_path=$(echo "$original_path" | sed -E "s/PhiZone Player[_-]${{ needs.metadata.outputs.version }}(-1)?/PhiZone.Player_${{ needs.metadata.outputs.version-name }}/g")
            echo "Renaming: $original_path -> $renamed_path"
            mv "$original_path" "$renamed_path"
            mv "$renamed_path" ~/artifacts/tauri/
          done

      - name: Generate artifact info
        id: info
        run: echo "NAME=tauri-${{ matrix.platform }}-$(echo ${{ matrix.args || '--target x86_64' }} | sed 's/.* //')-${{ needs.metadata.outputs.version-name }}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.info.outputs.NAME }}
          path: ~/artifacts/tauri/*